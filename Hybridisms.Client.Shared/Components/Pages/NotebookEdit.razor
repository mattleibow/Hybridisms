@page "/notebook/{notebookId}/edit"
@rendermode HybridRenderMode.InteractiveAuto

@using Hybridisms.Client.Shared.Services

@inject INotesService NotesService
@inject NavigationManager NavigationManager

<h3>Edit Notebook</h3>

@if (notebookNotFound)
{
    <div class="alert alert-danger">Notebook not found.</div>
}
else if (notebook is null)
{
    <p>Loading notebook...</p>
}
else
{
    <EditForm Model="notebook" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="notebook.Title" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="notebook.Description" />
        </div>
        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? notebookId { get; set; }

    private Notebook? notebook;
    private bool notebookNotFound;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(notebookId) && Guid.TryParse(notebookId, out var id))
            notebook = await NotesService.GetNotebookAsync(id);

        if (notebook is null)
        {
            notebookNotFound = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (notebook is not null)
        {
            notebook = await NotesService.SaveNotebookAsync(notebook);
            GoBack();
        }
    }

    private void GoBack()
    {
        if (notebook is not null)
            NavigationManager.NavigateTo($"/notebook/{notebook?.Id}/notes");
        else
            NavigationManager.NavigateTo("/");
    }
}
