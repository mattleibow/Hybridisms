@page "/note/{noteId}/edit"
@rendermode HybridRenderMode.InteractiveAuto

@using Hybridisms.Client.Shared.Services
@using Hybridisms.Client.Shared.Components

@inject INotesService NotesService
@inject ILabelRecommendationService LabelRecommendationService
@inject NavigationManager NavigationManager

<h3>Edit Note</h3>

@if (noteNotFound)
{
    <div class="alert alert-danger">Note not found.</div>
}
else if (note == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="note" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="note.Title" @oninput="OnNoteChanged" />
        </div>
        <div class="mb-3">
            <label for="content" class="form-label">Content</label>
            <InputTextArea id="content" class="form-control" @bind-Value="note.Content" @oninput="OnNoteChanged" />
        </div>
        <TagInput Tags="tagNames" AvailableTags="availableTags" TagsChanged="OnTagsChanged" Label="Labels" Placeholder="Add labels..." RecommendedTags="recommendedTags" />
        <button type="submit" class="btn btn-success">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="GoBack">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public string? noteId { get; set; }

    private Note? note;
    private bool noteNotFound = false;

    private List<string> tagNames = [];
    private List<string> availableTags = [];
    private List<Label> availableLabelObjects = [];
    private List<string> recommendedTags = [];
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(noteId) && Guid.TryParse(noteId, out var id))
            note = await NotesService.GetNoteAsync(id);
        
        if (note is null)
        {
            noteNotFound = true;
            return;
        }

        tagNames = note.Labels.Select(l => l.Name).ToList();

        // Load available tags
        await foreach (var label in NotesService.GetLabelsAsync())
        {
            if (string.IsNullOrWhiteSpace(label.Name))
                continue;

            availableTags.Add(label.Name);
            availableLabelObjects.Add(label);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (note != null)
        {
            @* await NotesService.UpdateNoteAsync(note); *@
            GoBack();
        }
    }

    private Task OnTagsChanged(List<string> tags)
    {
        if (note != null)
        {
            note.Labels = tags
                .Select(t => availableLabelObjects.FirstOrDefault(l => l.Name == t) ?? new Label { Name = t })
                .ToList();
        }
        return Task.CompletedTask;
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/notebook/" + note?.NotebookId + "/notes");
    }

    private async Task OnNoteChanged(ChangeEventArgs e)
    {
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();
        
        var token = debounceCts.Token;
        try
        {
            await Task.Delay(500, token); // 500ms debounce
            if (!token.IsCancellationRequested)
            {
                await RefreshSuggestions();
            }
        }
        catch (TaskCanceledException)
        {
            // Ignore, another input occurred
        }
    }

    private async Task RefreshSuggestions()
    {
        Console.WriteLine($"Refreshing suggestions for note: {note?.Title} {note?.Content}....");

        if (string.IsNullOrWhiteSpace(note?.Title) || string.IsNullOrWhiteSpace(note?.Content))
            return;

        recommendedTags = new List<string>();
        await foreach (var label in LabelRecommendationService.RecommendLabelsAsync(note, 3))
        {
            if (label?.Name is not string name || string.IsNullOrWhiteSpace(name))
                continue;

            recommendedTags.Add(name);
        }

        Console.WriteLine($"Recommended tags: {string.Join(", ", recommendedTags)}");
    }
}
